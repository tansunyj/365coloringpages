'use client';

/**
 * 这是方案 B 的实现：从 URL 参数获取用户信息
 * 
 * 如果后端没有 /api/user/me 接口，可以使用这个版本
 * 
 * 使用方法：
 * 1. 将此文件重命名为 page.tsx，替换当前的 page.tsx
 * 2. 修改后端重定向 URL，包含用户信息参数：
 *    http://localhost:3000/oauth/success?token=xxx&provider=github&email=xxx&name=xxx&avatar=xxx&userId=xxx
 */

import { useEffect, useState, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';

function OAuthSuccessContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const token = searchParams.get('token');
    const provider = searchParams.get('provider');
    const email = searchParams.get('email');
    const name = searchParams.get('name');
    const avatar = searchParams.get('avatar');
    const userId = searchParams.get('userId');

    if (!token) {
      setError('未获取到认证令牌');
      return;
    }

    try {
      // 保存 token 到 localStorage
      localStorage.setItem('authToken', token);
      localStorage.setItem('authProvider', provider || 'unknown');

      // 构建用户信息对象
      const userInfo = {
        id: userId ? parseInt(userId) : undefined,
        email: email ? decodeURIComponent(email) : '',
        name: name ? decodeURIComponent(name) : (provider === 'github' ? 'GitHub User' : 'Google User'),
        avatar: avatar ? decodeURIComponent(avatar) : '',
        provider: provider || 'unknown',
        isActive: true
      };

      // 保存用户信息到 localStorage
      localStorage.setItem('userInfo', JSON.stringify(userInfo));

      console.log(`✅ ${provider === 'github' ? 'GitHub' : 'Google'} 登录成功！`);
      console.log('💾 Token 已保存:', token);
      console.log('👤 用户信息已保存:', userInfo);
      
      // 延迟跳转，让用户看到加载动画
      setTimeout(() => {
        window.location.href = '/';
      }, 1000);
    } catch (err) {
      console.error('❌ 保存认证信息失败:', err);
      setError('保存认证信息失败，请重试');
    }
  }, [searchParams]);

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="mb-4 text-6xl">❌</div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">认证失败</h1>
          <p className="text-gray-600 mb-6">{error}</p>
          <button
            onClick={() => router.push('/')}
            className="px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors"
          >
            返回首页
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="text-center">
        <div className="mb-4">
          <div className="animate-spin rounded-full h-16 w-16 border-4 border-blue-500 border-t-transparent mx-auto"></div>
        </div>
        <h1 className="text-2xl font-bold text-gray-900 mb-2">登录成功！</h1>
        <p className="text-gray-600">正在跳转...</p>
      </div>
    </div>
  );
}

export default function OAuthSuccessPage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="animate-spin rounded-full h-16 w-16 border-4 border-blue-500 border-t-transparent"></div>
      </div>
    }>
      <OAuthSuccessContent />
    </Suspense>
  );
}

